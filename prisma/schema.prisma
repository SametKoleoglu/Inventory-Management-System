// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  customerType       CustomerType
  firstName          String
  lastName           String
  phone              String       @unique
  gender             Gender
  country            String
  location           String
  maxCreditLimit     Float
  maxCreditDays      Int
  unpaidCreditAmount Int          @default(0)
  taxPin             String?
  dob                DateTime?
  email              String?      @unique
  NIN                String?      @unique
  sales              Sale[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

enum CustomerType {
  RETAIL
  WHOLESALE
  DISTRIBUTOR
  OTHER
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  password  String
  firstName String
  lastName  String
  phone     String    @unique
  dob       DateTime?
  gender    Gender
  image     String?
  role      Role      @default(ATTENDANT)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shops     Shop[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  ATTENDANT
}

model Shop {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String    @unique
  location     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminId      String    @db.ObjectId
  admin        User      @relation(fields: [adminId], references: [id])
  products     Product[]
  attendantIds String[]  @db.ObjectId
}

model Supplier {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  supplierType      SupplierType
  name              String
  contactPerson     String
  phone             String       @unique
  email             String       @unique
  location          String
  country           String
  website           String
  taxPin            String?
  regNumber         String?      @unique
  bankAccountNumber String?
  bankName          String?
  paymentTerms      String?
  logo              String?      @default("https://img.freepik.com/free-photo/character-with-blue-cap-carrying-some-gifts_1156-304.jpg?t=st=1734216824~exp=1734220424~hmac=b0b7416596d2b093b5208e99a2514f40844c98d265389ebb6954a37fc37c12e6&w=826")
  rating            Float?
  notes             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  products          Product[]
}

enum SupplierType {
  MANUFACTURER
  DISTRIBUTOR
  WHOLESALER
  RETAILER
  OTHER
}

model Unit {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  slug         String    @unique
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  batchNumber    String?
  barCode        String?    @unique
  image          String?    @default("https://picsum.photos/200/300")
  tax            Int?
  alertQty       Int
  stockQty       Int
  price          Int
  wholesalePrice Int        @default(0)
  buyingPrice    Int?
  sku            String     @unique
  productCode    String     @unique
  slug           String     @unique
  supplierId     String     @db.ObjectId
  unitId         String     @db.ObjectId
  shopId         String     @default("675dd9a1df26e3da97765c54") @db.ObjectId
  brandId        String     @db.ObjectId
  categoryId     String     @db.ObjectId
  expiryDate     DateTime   @default("2025-12-18T23:59:59Z")
  shop           Shop       @relation(fields: [shopId], references: [id])
  unit           Unit       @relation(fields: [unitId], references: [id])
  brand          Brand      @relation(fields: [brandId], references: [id])
  category       Category   @relation(fields: [categoryId], references: [id])
  supplier       Supplier   @relation(fields: [supplierId], references: [id])
  saleItems      SaleItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

enum PaymentStatus {
  PAID
  CREDIT
}

model Sale {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  customerId      String        @db.ObjectId
  customerName    String
  orderNumber     String        @unique
  customerEmail   String?
  orderAmount     Int
  balanceAmount   Int?          @default(0)
  paidAmount      Int
  orderType       String?
  paymentStatus   PaymentStatus @default(PAID)
  paymentMethod   String?
  transactionCode String?

  // RELATION
  saleItems SaleItem[]
  customer  Customer   @relation(fields: [customerId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SaleItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  saleId        String   @db.ObjectId
  productId     String   @db.ObjectId
  qty           Int
  salePrice     Float
  productName   String
  productImage  String
  customerName  String
  customerEmail String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
  sale          Sale     @relation(fields: [saleId], references: [id])
}
